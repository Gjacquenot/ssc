
#include <iostream>
#include <math.h>
#include <tr1/memory>
#define MIN(a,b) (a>b) ? b : a;
#include "ipopt_nlp.hpp"
#include <cstdlib>
#include "State.hpp"

#define PI 4.*atan(1.)
#include "StateGenerator.hpp"
#include "Thruster.hpp"
#include "LinearInterpolator.hpp"
#include "Fx.hpp"
int main(int argc, char* argv[])
{
    if (argv) {}
    StateGenerator g;
    ThrusterConfig c;
    c.command_range_in_model = MinMax(0,1);
    c.usable_command_range = c.command_range_in_model;
    c.angle_range_in_model = MinMax(0,2.*PI);
    c.usable_angle_range = c.angle_range_in_model;
    c.Fmax = 130e3;
    c.Pmax = 880e3;
    c.normalized_power_for_each_command = {0.0,1.3717421124828531e-3,1.0973936899862825e-2,3.7037037037037035e-2,8.77914951989026e-2,0.1714677640603567,0.2962962962962963,0.4705075445816187,0.7023319615912208,1.0};
    c.normalized_thrust_for_each_command = {1.0e-2,1.2345679012345678e-2,1.5625e-2,2.040816326530612e-2,2.7777777777777776e-2,4.0e-2,6.25e-2,0.1111111111111111,0.25,1.0};
    c.normalized_Fx_eff_for_each_angle= {1.0,-0.8390715290764524,0.40808206181339196,0.15425144988758405,-0.6669380616522619,0.9649660284921133,-0.9524129804151563,0.6333192030862999,-0.11038724383904756,-0.4480736161291701,0.8623188722876839,-0.9990208133146474,0.8141809705265618,-0.3672913304546965,-0.19781357400426822,0.6992508064783751,-0.9756293127952373,0.9379947521194415,-0.5984600690578581,6.630685835171127e-2,0.48718767500700594,-0.8838774731823718,0.9960851708717191,-0.7876959416450754,0.32578130553514806,0.24098830528525864,-0.7301941571456378,0.9843819506325049,-0.9217395798793158,0.5624289267667438,-2.2096619278683942e-2,-0.5253476385155728,0.903705111970614,-0.9911988217552068,0.7596683100072248,-0.28363327918216646,-0.2836910914865273};
    c.normalized_Fy_eff_for_each_angle = {0.0,-0.5440211108893698,0.9129452507276277,-0.9880316240928618,0.7451131604793488,-0.26237485370392877,-0.3048106211022167,0.7738906815578891,-0.9938886539233752,0.8939966636005579,-0.5063656411097588,-4.424267808508516e-2,0.5806111842123143,-0.9301059501867618,0.9802396594403116,-0.7148764296291646,0.21942525837900473,0.3466494554970303,-0.8011526357338304,0.9977992786806003,-0.8732972972139946,0.46771851834275896,8.83987124875598e-2,-0.6160642040533421,0.9454451549211168,-0.9705280195418053,0.6832397038158508,-0.1760459464712114,-0.3878094208292295,0.8268456339220814,-0.9997558399011495,0.8508876886558596,-0.42815542808445156,-0.13238162920545193,0.6503107401625525,-0.9589328250406132,0.9589157234143065};
   // std::tr1::shared_ptr<Thruster> t1(new Thruster("mlkj",g, c));
   // std::tr1::shared_ptr<Thruster> t2(new Thruster("mlkjlkmj", g, c));
    std::vector<std::tr1::shared_ptr<Thruster> > v;
    v.push_back(std::tr1::shared_ptr<Thruster>(new Thruster("mlkj",g, c)));
    v.push_back(std::tr1::shared_ptr<Thruster>(new Thruster("mlkjlkmj",g, c)));
    auto f = v.front()->get_Fx();
    auto states = v.front()->get_states();
    Fx fx(v);
    **(states.at(0)) = 3;
    **(states.at(1)) = PI/4.;
    std::cout << "Fx = " << f() << std::endl;
    return 0;
}
